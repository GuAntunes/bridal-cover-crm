@startuml BridalCover CRM - Architecture Overview

title BridalCover CRM - Layered Architecture Overview

skinparam rectangle {
    BackgroundColor<<presentation>> LightCyan
    BackgroundColor<<application>> LightGreen
    BackgroundColor<<domain>> LightBlue
    BackgroundColor<<infrastructure>> LightYellow
    BackgroundColor<<external>> LightPink
}

skinparam arrow {
    Color Blue
}

!define LAYER rectangle

' Presentation Layer
LAYER "Presentation Layer" <<presentation>> {
    package "User Interfaces" {
        [React Web App]
        [Mobile App]
        [Desktop App]
    }
    
    package "API Layer" {
        [REST Controllers]
        [GraphQL Endpoint]
        [WebSocket Gateway]
    }
}

' Application Layer  
LAYER "Application Layer" <<application>> {
    package "Lead Management" {
        [Lead Use Cases]
        [Client Use Cases]
        [Conversion Use Cases]
    }
    
    package "Sales Execution" {
        [Contact Use Cases]
        [Script Use Cases]
        [Follow-up Use Cases]
    }
    
    package "Analytics" {
        [Territory Use Cases]
        [Density Use Cases]
        [Reporting Use Cases]
    }
    
    package "Integration" {
        [Import Use Cases]
        [Validation Use Cases]
        [Sync Use Cases]
    }
}

' Domain Layer
LAYER "Domain Layer" <<domain>> {
    package "Core Domain" {
        [Lead Aggregate]
        [Client Aggregate]
        [Contact Log Aggregate]
        [Script Aggregate]
        [Territory Aggregate]
    }
    
    package "Domain Services" {
        [Lead Qualification Service]
        [Conversion Service]
        [Territory Analysis Service]
        [Contact Strategy Service]
    }
    
    package "Domain Events" {
        [Event Publisher]
        [Event Handlers]
        [Event Store]
    }
}

' Infrastructure Layer
LAYER "Infrastructure Layer" <<infrastructure>> {
    package "Data Persistence" {
        database "PostgreSQL" {
            [Lead Repository]
            [Contact Repository] 
            [Script Repository]
            [Territory Repository]
        }
        
        database "Redis Cache" {
            [Lead Cache]
            [Territory Cache]
            [Session Cache]
        }
    }
    
    package "Messaging" {
        queue "Apache Kafka" {
            [Domain Events Queue]
            [Analytics Events]
            [Integration Events]
        }
        
        queue "RabbitMQ" {
            [Command Queue]
            [Email Queue]
            [SMS Queue]
        }
    }
    
    package "Security & Monitoring" {
        [Authentication Service]
        [Authorization Service]
        [Logging Service]
        [Metrics Service]
        [Health Checks]
    }
}

' External Services Layer
LAYER "External Services" <<external>> {
    package "Google Services" {
        cloud "Google Places API"
        cloud "Google Maps API"
        cloud "Google Geocoding API"
    }
    
    package "Communication" {
        cloud "Email Service Provider"
        cloud "SMS Gateway"
        cloud "WhatsApp Business API"
    }
    
    package "Monitoring" {
        cloud "Application Insights"
        cloud "Log Analytics"
        cloud "Error Tracking"
    }
}

' Layer Dependencies (Downward only)
"Presentation Layer" --> "Application Layer" : HTTP/REST
"Application Layer" --> "Domain Layer" : Direct calls
"Application Layer" --> "Infrastructure Layer" : Via Interfaces
"Domain Layer" --> "Infrastructure Layer" : Event publishing
"Infrastructure Layer" --> "External Services" : API calls

' Horizontal Communication within layers
[Lead Use Cases] <--> [Contact Use Cases] : Domain Events
[Territory Use Cases] <--> [Lead Use Cases] : Analytics Events
[Import Use Cases] --> [Lead Use Cases] : New Leads

' Event Flow
[Event Publisher] --> [Domain Events Queue]
[Domain Events Queue] --> [Event Handlers]

' Cache Flow  
[Lead Repository] <--> [Lead Cache]
[Territory Repository] <--> [Territory Cache]

' External Integration Flow
[Import Use Cases] --> "Google Places API"
[Contact Use Cases] --> "Email Service Provider"
[Contact Use Cases] --> "SMS Gateway"
[Territory Use Cases] --> "Google Maps API"

note top of "Presentation Layer" : User interaction layer\nHandles UI/UX concerns\nInput validation and formatting

note top of "Application Layer" : Business use cases\nOrchestrates domain operations\nTransaction boundaries

note top of "Domain Layer" : Core business logic\nBusiness rules and invariants\nDomain-specific operations

note top of "Infrastructure Layer" : Technical implementation\nData access and external APIs\nFramework-specific code

note bottom of "External Services" : Third-party integrations\nCloud services\nExternal APIs

note right of [Lead Aggregate] : Rich domain model\nEncapsulates business rules\nMaintains consistency

note right of [Domain Events Queue] : Asynchronous communication\nDecouples bounded contexts\nEnables event sourcing

note left of "PostgreSQL" : ACID compliance\nRelational data integrity\nComplex queries support

note left of "Redis Cache" : High-performance caching\nSession management\nReal-time data

@enduml 