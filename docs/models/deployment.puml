@startuml BridalCover CRM - Deployment Architecture

title BridalCover CRM - Production Deployment

skinparam node {
    BackgroundColor<<web>> LightBlue
    BackgroundColor<<app>> LightGreen
    BackgroundColor<<database>> Orange
    BackgroundColor<<cache>> Yellow
    BackgroundColor<<messaging>> Purple
    BackgroundColor<<monitoring>> Pink
}

skinparam cloud {
    BackgroundColor<<cdn>> LightCyan
    BackgroundColor<<external>> LightPink
}

' Internet/CDN Layer
cloud "Internet" {
    cloud "CloudFlare CDN" <<cdn>> {
        [Static Assets]
        [Images & CSS]
        [JavaScript Bundles]
    }
}

' Load Balancer Layer
node "Load Balancer Cluster" <<web>> {
    [NGINX LB Primary]
    [NGINX LB Secondary]
    [SSL Termination]
    [Rate Limiting]
}

' Web Tier
node "Web Server Cluster" <<web>> {
    node "Web Server 1" {
        [React App Instance 1]
        [NGINX Web Server 1]
    }
    
    node "Web Server 2" {
        [React App Instance 2]
        [NGINX Web Server 2]
    }
    
    node "Web Server 3" {
        [React App Instance 3]
        [NGINX Web Server 3]
    }
}

' Application Tier
node "Application Server Cluster" <<app>> {
    node "App Server 1" {
        [Spring Boot App 1]
        component "Lead Management Service 1"
        component "Sales Execution Service 1"
    }
    
    node "App Server 2" {
        [Spring Boot App 2]
        component "Geographic Analytics Service 1"
        component "External Integration Service 1"
    }
    
    node "App Server 3" {
        [Spring Boot App 3]
        component "Lead Management Service 2"
        component "Sales Execution Service 2"
    }
    
    node "App Server 4" {
        [Spring Boot App 4]
        component "Geographic Analytics Service 2"
        component "External Integration Service 2"
    }
}

' Database Tier
node "Database Cluster" <<database>> {
    node "Primary DB Server" {
        database "PostgreSQL Primary" {
            [Leads Database]
            [Contacts Database]
            [Scripts Database]
            [Analytics Database]
        }
    }
    
    node "Secondary DB Server" {
        database "PostgreSQL Read Replica 1" {
            [Read-Only Replica]
        }
    }
    
    node "Tertiary DB Server" {
        database "PostgreSQL Read Replica 2" {
            [Read-Only Replica]
        }
    }
}

' Cache Tier
node "Cache Cluster" <<cache>> {
    node "Redis Master" {
        database "Redis Primary" {
            [Session Cache]
            [Lead Cache]
            [Territory Cache]
        }
    }
    
    node "Redis Slave 1" {
        database "Redis Replica 1" {
            [Backup Cache]
        }
    }
    
    node "Redis Slave 2" {
        database "Redis Replica 2" {
            [Backup Cache]
        }
    }
}

' Messaging Tier
node "Message Broker Cluster" <<messaging>> {
    node "Kafka Broker 1" {
        queue "Kafka Node 1" {
            [Domain Events]
            [Analytics Events]
        }
    }
    
    node "Kafka Broker 2" {
        queue "Kafka Node 2" {
            [Domain Events]
            [Analytics Events]
        }
    }
    
    node "Kafka Broker 3" {
        queue "Kafka Node 3" {
            [Domain Events]
            [Analytics Events]
        }
    }
    
    node "RabbitMQ Server" {
        queue "RabbitMQ" {
            [Command Queue]
            [Email Queue]
            [SMS Queue]
        }
    }
}

' Monitoring & Logging
node "Monitoring Infrastructure" <<monitoring>> {
    node "Monitoring Server" {
        [Prometheus]
        [Grafana]
        [AlertManager]
    }
    
    node "Logging Server" {
        [ELK Stack]
        [Elasticsearch]
        [Logstash]
        [Kibana]
    }
    
    node "Metrics Server" {
        [Application Insights]
        [Custom Metrics API]
    }
}

' External Services
cloud "External Services" <<external>> {
    cloud "Google Cloud" {
        [Google Places API]
        [Google Maps API]
        [Google Geocoding API]
    }
    
    cloud "Communication Services" {
        [SendGrid Email API]
        [Twilio SMS API]
        [WhatsApp Business API]
    }
    
    cloud "Security Services" {
        [Auth0]
        [SSL Certificate Provider]
    }
}

' Backup & Storage
node "Backup Infrastructure" {
    database "Backup Storage" {
        [Database Backups]
        [File System Backups]
        [Configuration Backups]
    }
    
    cloud "Cloud Storage" {
        [AWS S3 / Azure Blob]
        [Offsite Backups]
        [Archive Storage]
    }
}

' Connection Flows
"Internet" --> [NGINX LB Primary] : HTTPS/443
[NGINX LB Primary] --> "Web Server Cluster" : HTTP/80
"Web Server Cluster" --> "Application Server Cluster" : HTTP/8080

"Application Server Cluster" --> "PostgreSQL Primary" : 5432
"Application Server Cluster" --> "PostgreSQL Read Replica 1" : 5432
"Application Server Cluster" --> "PostgreSQL Read Replica 2" : 5432

"Application Server Cluster" --> "Redis Primary" : 6379
"Redis Primary" --> "Redis Replica 1" : Replication
"Redis Primary" --> "Redis Replica 2" : Replication

"Application Server Cluster" --> "Kafka Node 1" : 9092
"Application Server Cluster" --> "Kafka Node 2" : 9092
"Application Server Cluster" --> "Kafka Node 3" : 9092
"Application Server Cluster" --> "RabbitMQ" : 5672

"PostgreSQL Primary" --> "PostgreSQL Read Replica 1" : Streaming Replication
"PostgreSQL Primary" --> "PostgreSQL Read Replica 2" : Streaming Replication

"Application Server Cluster" --> "Google Cloud" : HTTPS/443
"Application Server Cluster" --> "Communication Services" : HTTPS/443

"Application Server Cluster" --> [Prometheus] : Metrics Export
[Prometheus] --> [Grafana] : Visualization
"Application Server Cluster" --> [ELK Stack] : Log Shipping

"Database Cluster" --> "Backup Storage" : Scheduled Backups
"Backup Storage" --> "Cloud Storage" : Offsite Sync

' High Availability Notes
note right of "Load Balancer Cluster" : Active-Passive HA\nFailover in 30 seconds\nHealth checks every 5 seconds

note right of "Application Server Cluster" : Auto-scaling enabled\nMin: 2 instances\nMax: 8 instances\nCPU threshold: 70%

note right of "Database Cluster" : Master-Slave replication\nAutomatic failover\nPoint-in-time recovery\nDaily automated backups

note right of "Cache Cluster" : Redis Sentinel\nAutomatic failover\nData persistence enabled\nMemory monitoring

note right of "Message Broker Cluster" : Kafka replication factor: 3\nMin in-sync replicas: 2\nRabbitMQ clustering\nMessage persistence

note bottom of "Monitoring Infrastructure" : 24/7 monitoring\nReal-time alerts\nSLA monitoring\nPerformance dashboards

' Deployment Specifications
note top of "Web Server Cluster" : Container: Docker\nOrchestration: Kubernetes\nCPU: 2 cores\nRAM: 4GB

note top of "Application Server Cluster" : Container: Docker\nOrchestration: Kubernetes\nCPU: 4 cores\nRAM: 8GB\nJVM: OpenJDK 17

note top of "Database Cluster" : OS: Ubuntu 22.04\nPostgreSQL 15\nCPU: 8 cores\nRAM: 32GB\nStorage: SSD RAID 10

note top of "Cache Cluster" : OS: Ubuntu 22.04\nRedis 7.0\nCPU: 4 cores\nRAM: 16GB\nPersistence: RDB + AOF

@enduml 