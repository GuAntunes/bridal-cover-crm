@startuml BridalCover CRM - C4 Component Diagram (Lead Management Service)

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title BridalCover CRM - Lead Management Service Components

' External Containers
Container(web_app, "Web Application", "React/TypeScript", "Interface web do sistema")
Container(api_gateway, "API Gateway", "Spring Cloud Gateway", "Gateway de entrada das requisições")
ContainerDb(main_db, "Main Database", "PostgreSQL", "Base de dados principal")
ContainerDb(cache_db, "Cache Database", "Redis", "Cache de alta performance")
Container(message_broker, "Message Broker", "Apache Kafka", "Broker de eventos de domínio")

System_Boundary(lead_service, "Lead Management Service") {
    ' Controllers (Adapters de Entrada)
    Component(lead_controller, "Lead Controller", "Spring MVC Controller", "Endpoints REST para operações de leads")
    Component(client_controller, "Client Controller", "Spring MVC Controller", "Endpoints REST para operações de clientes")
    Component(conversion_controller, "Conversion Controller", "Spring MVC Controller", "Endpoints para conversão de leads")
    
    ' Application Services (Casos de Uso)
    Component(lead_service_comp, "Lead Service", "Application Service", "Orquestra casos de uso relacionados a leads")
    Component(client_service_comp, "Client Service", "Application Service", "Gerencia operações de clientes")
    Component(conversion_service_comp, "Conversion Service", "Application Service", "Processa conversões de lead para cliente")
    Component(qualification_service, "Qualification Service", "Application Service", "Gerencia processo de qualificação de leads")
    
    ' Domain Layer
    Component(lead_aggregate, "Lead Aggregate", "Domain Aggregate", "Aggregate root para leads com regras de negócio")
    Component(client_aggregate, "Client Aggregate", "Domain Aggregate", "Aggregate root para clientes")
    Component(address_vo, "Address Value Object", "Domain Value Object", "Objeto de valor para endereços")
    Component(lead_qualification, "Lead Qualification", "Domain Service", "Serviço de domínio para qualificação")
    
    ' Ports (Interfaces)
    Component(lead_port, "Lead Management Port", "Inbound Port", "Interface para casos de uso de leads")
    Component(client_port, "Client Management Port", "Inbound Port", "Interface para casos de uso de clientes")
    Component(lead_repo_port, "Lead Repository Port", "Outbound Port", "Interface para persistência de leads")
    Component(client_repo_port, "Client Repository Port", "Outbound Port", "Interface para persistência de clientes")
    Component(event_publisher_port, "Event Publisher Port", "Outbound Port", "Interface para publicação de eventos")
    
    ' Adapters (Infrastructure)
    Component(lead_repository, "Lead Repository", "JPA Repository", "Implementação da persistência de leads")
    Component(client_repository, "Client Repository", "JPA Repository", "Implementação da persistência de clientes")
    Component(lead_cache, "Lead Cache", "Redis Adapter", "Cache para leads frequentemente acessados")
    Component(event_publisher, "Event Publisher", "Kafka Adapter", "Publicador de eventos de domínio")
    
    ' Event Handlers
    Component(contact_event_handler, "Contact Event Handler", "Event Handler", "Processa eventos de contato bem-sucedido")
    Component(territory_event_handler, "Territory Event Handler", "Event Handler", "Processa eventos de análise territorial")
}

' External Systems
System_Ext(sales_service, "Sales Execution Service", "Serviço de execução de vendas")
System_Ext(analytics_service, "Geographic Analytics Service", "Serviço de análise geográfica")

' User to Controllers
Rel(web_app, api_gateway, "Requisições HTTPS", "REST/JSON")
Rel(api_gateway, lead_controller, "Operações de leads", "HTTP/JSON")
Rel(api_gateway, client_controller, "Operações de clientes", "HTTP/JSON")
Rel(api_gateway, conversion_controller, "Conversões", "HTTP/JSON")

' Controllers to Application Services
Rel(lead_controller, lead_service_comp, "Delega operações", "Method calls")
Rel(client_controller, client_service_comp, "Delega operações", "Method calls")
Rel(conversion_controller, conversion_service_comp, "Processa conversão", "Method calls")

' Application Services to Ports
Rel(lead_service_comp, lead_port, "Implementa", "Interface")
Rel(client_service_comp, client_port, "Implementa", "Interface")

' Application Services to Domain
Rel(lead_service_comp, lead_aggregate, "Executa regras de negócio", "Method calls")
Rel(client_service_comp, client_aggregate, "Executa regras de negócio", "Method calls")
Rel(conversion_service_comp, lead_aggregate, "Converte lead", "Method calls")
Rel(conversion_service_comp, client_aggregate, "Cria cliente", "Method calls")
Rel(qualification_service, lead_qualification, "Qualifica lead", "Method calls")

' Domain to Value Objects
Rel(lead_aggregate, address_vo, "Utiliza", "Composition")
Rel(client_aggregate, address_vo, "Utiliza", "Composition")

' Application Services to Repository Ports
Rel(lead_service_comp, lead_repo_port, "Persiste dados", "Interface")
Rel(client_service_comp, client_repo_port, "Persiste dados", "Interface")

' Repository Ports to Adapters
Rel(lead_repo_port, lead_repository, "Implementado por", "Interface")
Rel(client_repo_port, client_repository, "Implementado por", "Interface")

' Repositories to Database
Rel(lead_repository, main_db, "SQL queries", "JDBC/SQL")
Rel(client_repository, main_db, "SQL queries", "JDBC/SQL")

' Cache Integration
Rel(lead_repository, lead_cache, "Cache operations", "Redis Protocol")
Rel(lead_cache, cache_db, "Store/Retrieve", "Redis Protocol")

' Event Publishing
Rel(lead_service_comp, event_publisher_port, "Publica eventos", "Interface")
Rel(conversion_service_comp, event_publisher_port, "Publica conversão", "Interface")
Rel(event_publisher_port, event_publisher, "Implementado por", "Interface")
Rel(event_publisher, message_broker, "Eventos de domínio", "Kafka Protocol")

' Event Consumption
Rel(message_broker, contact_event_handler, "ContactSuccessful events", "Kafka Protocol")
Rel(message_broker, territory_event_handler, "TerritoryPrioritized events", "Kafka Protocol")
Rel(contact_event_handler, lead_service_comp, "Atualiza status lead", "Method calls")
Rel(territory_event_handler, lead_service_comp, "Prioriza leads", "Method calls")

' Cross-Service Communication
Rel(sales_service, message_broker, "Publica eventos de contato", "Kafka")
Rel(analytics_service, message_broker, "Publica análises territoriais", "Kafka")

' Component Descriptions
note right of lead_aggregate
  **Domain Logic:**
  • Lead lifecycle management
  • Business rule validation
  • Status transitions
  • Qualification criteria
end note

note right of lead_service_comp
  **Use Cases:**
  • Create Lead
  • Update Lead Status
  • Qualify Lead
  • Search Leads
  • Lead Analytics
end note

note right of conversion_service_comp
  **Conversion Logic:**
  • Validate conversion criteria
  • Create client from lead
  • Update lead status
  • Publish conversion event
  • Calculate conversion metrics
end note

note right of lead_repository
  **Data Access:**
  • CRUD operations
  • Complex queries
  • Transaction management
  • Cache coordination
end note

note bottom of event_publisher
  **Domain Events Published:**
  • LeadCreated
  • LeadQualified
  • LeadConverted
  • ClientCreated
  • LeadStatusUpdated
end note

note bottom of contact_event_handler
  **Events Consumed:**
  • ContactSuccessful
  • ContactAttempted
  • FollowUpScheduled
end note

' Architecture Patterns
note top of lead_port : **Hexagonal Architecture**\nInbound Ports isolate\nbusiness logic from\nframework concerns

note top of lead_repo_port : **Dependency Inversion**\nOutbound Ports allow\ninfrastructure changes\nwithout domain impact

SHOW_LEGEND()

@enduml 