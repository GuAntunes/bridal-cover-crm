@startuml Domain Model

!theme plain
title üéØ BridalCover CRM - Domain Model

skinparam class {
    BackgroundColor<<implemented>> #90EE90
    BackgroundColor<<planned>> #87CEEB
    BackgroundColor<<in_progress>> #F0E68C
    BorderColor<<implemented>> #228B22
    BorderColor<<planned>> #4682B4
    BorderColor<<in_progress>> #DAA520
}

' ===== FOUNDATION (IMPLEMENTED) =====
package "üèóÔ∏è DDD Foundation" <<implemented>> {
    abstract class DomainEvent <<implemented>> {
        +eventId: String
        +occurredOn: Instant
        +eventVersion: String
        +aggregateId: String
        +eventType: String
        +userId: String?
        +correlationId: String?
        +causationId: String?
        +metadata: Map<String, Any>
    }
    
    abstract class AggregateRoot<T> <<implemented>> {
        +id: T
        -_domainEvents: MutableList<DomainEvent>
        +domainEvents: List<DomainEvent>
        --
        #addDomainEvent(event: DomainEvent): void
        +clearDomainEvents(): void
    }
    
    abstract class DomainObject<T> <<implemented>> {
        +id: T
        --
        +equals(other: Any?): Boolean
        +hashCode(): Int
    }
}

' ===== CORE DOMAIN (NEXT TO IMPLEMENT) =====
package "üéØ Core Business Domain" {
    
    ' Lead Aggregate (Priority 1)
    class Lead <<in_progress>> {
        +id: LeadId
        +name: String
        +cnpj: String?
        +email: String?
        +phone: String?
        +address: Address
        +status: LeadStatus
        +source: LeadSource
        +createdAt: LocalDateTime
        +updatedAt: LocalDateTime
        --
        +convertToClient(): Client
        +updateStatus(status: LeadStatus): void
        +addContact(contact: ContactLog): void
        +updateContactInfo(email: String?, phone: String?): void
    }
    
    ' Client Aggregate (Priority 2)
    class Client <<planned>> {
        +id: ClientId
        +name: String
        +cnpj: String
        +email: String
        +phone: String
        +address: Address
        +registrationDate: LocalDate
        +isActive: Boolean
        --
        +deactivate(): void
        +updateContactInfo(phone: String, email: String?): void
        +reactivate(): void
    }
    
    ' Value Objects (Priority 1)
    class Address <<planned>> {
        +street: String?
        +city: String
        +state: String
        +postalCode: String?
        +latitude: Double?
        +longitude: Double?
        +country: String
        --
        +isComplete(): Boolean
        +getCoordinates(): Coordinates?
        +distanceTo(other: Address): Double?
    }
    
    class Coordinates <<planned>> {
        +latitude: Double
        +longitude: Double
        --
        +distanceTo(other: Coordinates): Double
        +isValid(): Boolean
    }
    
    ' ID Value Objects
    class LeadId <<in_progress>> {
        +value: String
        --
        +toString(): String
    }
    
    class ClientId <<planned>> {
        +value: String
        --
        +toString(): String
    }
    
    ' Enums (Priority 1)
    enum LeadStatus <<in_progress>> {
        NEW
        CONTACTED
        QUALIFIED
        PROPOSAL_SENT
        NEGOTIATING
        CONVERTED
        LOST
    }
    
    enum LeadSource <<in_progress>> {
        MANUAL_ENTRY
        GOOGLE_PLACES
        REFERRAL
        WEBSITE
    }
}

' ===== DOMAIN EVENTS (NEXT TO IMPLEMENT) =====
package "‚ö° Domain Events" {
    class LeadCreatedEvent <<planned>> {
        +aggregateId: String
        +leadName: String
        +leadSource: LeadSource
        +eventType: String = "LeadCreated"
        --
        +getLeadDetails(): Map<String, Any>
    }
    
    class LeadConvertedEvent <<planned>> {
        +aggregateId: String
        +clientId: String
        +conversionDate: LocalDateTime
        +eventType: String = "LeadConverted"
        --
        +getConversionDetails(): Map<String, Any>
    }
    
    class LeadStatusChangedEvent <<planned>> {
        +aggregateId: String
        +previousStatus: LeadStatus
        +newStatus: LeadStatus
        +eventType: String = "LeadStatusChanged"
        --
        +getStatusChange(): Map<String, LeadStatus>
    }
}

' ===== RELATIONSHIPS =====
' Foundation relationships
Lead --|> AggregateRoot : extends
Client --|> AggregateRoot : extends

' Domain relationships
Lead --> LeadId : has
Lead --> Address : located at
Lead --> LeadStatus : has status
Lead --> LeadSource : originated from
Client --> ClientId : has
Client --> Address : located at
Address --> Coordinates : may have

' Event relationships
Lead ..> LeadCreatedEvent : generates
Lead ..> LeadConvertedEvent : generates
Lead ..> LeadStatusChangedEvent : generates
LeadCreatedEvent --|> DomainEvent : extends
LeadConvertedEvent --|> DomainEvent : extends
LeadStatusChangedEvent --|> DomainEvent : extends

' ===== IMPLEMENTATION NOTES =====
note top of Lead : üöÄ **PRIORITY 1**\nStart with this aggregate\nCore business entity\nRich domain model

note right of Address : üó∫Ô∏è **GEOGRAPHIC FOCUS**\nEssential for territory analysis\nGoogle Maps integration ready\nSupports coordinates

note bottom of LeadCreatedEvent : ‚ö° **EVENT-DRIVEN**\nGenerated when Lead is created\nTriggers welcome workflows\nEnables analytics

note left of DomainEvent : ‚úÖ **IMPLEMENTED**\nFoundation ready\nEvent sourcing capable\nMetadata for tracing

' ===== IMPLEMENTATION ROADMAP =====
legend bottom right
    |= Status |= Color |= Next Action |
    | <back:#90EE90>Implemented</back> | Green | ‚úÖ Ready to use |
    | <back:#87CEEB>Planned</back> | Blue | üöß Implement next |
    | <back:#F0E68C>In Progress</back> | Yellow | üîÑ Currently working |
    
    **Implementation Order:**
    1Ô∏è‚É£ **LeadId, Address, LeadStatus** (Value Objects & Enums)
    2Ô∏è‚É£ **Lead Aggregate** (Core business logic)
    3Ô∏è‚É£ **LeadCreatedEvent** (Domain event)
    4Ô∏è‚É£ **Client Aggregate** (Conversion target)
    5Ô∏è‚É£ **Additional Events** (Status changes, conversion)
    
    **Remember:** Update this diagram as you implement!
    Mark components as <<in_progress>> then <<implemented>>
endlegend

@enduml
